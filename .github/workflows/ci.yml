name: CI

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: 'Build and Push'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup node
      uses: actions/setup-node@v4
      with:
        node-version: 22
        cache: 'npm'
    - run: npm install
      
    - name: Generate tag
      id: generate_tag
      run: |
        SHA=$(echo $GITHUB_SHA | head -c7)
        echo "sha=$SHA" >> $GITHUB_OUTPUT
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ECR_ARN }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: nicolas-ci
        IMAGE_TAG: ${{ steps.generate_tag.outputs.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY

    - name: Update ECS Task Definition
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: nicolas-ci
        IMAGE_TAG: ${{ steps.generate_tag.outputs.sha }}
        TASK_DEFINITION_ARN: ${{ secrets.ECS_TASK_DEFINITION_ARN }}
        ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
        ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
      run: |
        aws ecs update-service \
          --cluster $ECS_CLUSTER_NAME \
          --service $ECS_SERVICE_NAME \
          --task-definition $TASK_DEFINITION_ARN \
          --force-new-deployment